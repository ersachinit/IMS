@model AdminWebApp.Models.RoleMenus
@{              
    ViewBag.Title = "ManageRoleMenu";
    List<AdminWebApp.Models.Menus> menuList = ViewBag.Menu;
}
<style>
    ul {
        list-style: none;
    }

        ul#tree {
            width: 100%;
            float: left;
            display: block;
            padding: 0;
        }
</style>
@using (Html.BeginForm("ManageRoleMenu", "Account", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", id = "frm" }))
{
    @Html.AntiForgeryToken()
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h3 class="box-title">
                <b>Manage Role Menu</b>
            </h3>
            <h5>Assign Menu to Role</h5>
        </div>
        <!-- /.box-header -->
        <div class="panel-body">
            <div class="container">
                <div class="col-lg-12 well">
                    <div class="row">
                        @Html.ValidationSummary("", new { @class = "text-danger" })
                        <form>
                            <div class="col-sm-12">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="col-md-4">
                                            <label class="required"> User Role:</label>
                                            @Html.HiddenFor(m => m.Id)
                                            @Html.DropDownList("RoleId", (SelectList)ViewBag.RoleName, "Select", new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <ul id="tree">
                                            @foreach (var mp in menuList.Where(p => p.ParentId == 0))
                                            {
                                                <li style="display:inline-block;float:left;background: #fff; border-radius: 5px; border: 1px solid #ccc;margin: 15px 5px;padding: 10px; width: 32%; min-height: 300px;">
                                                    <span style="width: 100%; background: #ccc; display: block; padding: 5px 13px; margin: 0 0 5px;">
                                                        <input type="checkbox" class="top_most" name="chkMenu" value="@mp.MenuId">@mp.MenuName
                                                    </span>
                                                    @if (menuList.Count(p => p.ParentId == mp.MenuId) > 0)
                                                    {
                                                        @:<ul>
                                                        }
                                                    @RenderMenuItem(menuList, mp)
                                                    @if (menuList.Count(p => p.ParentId == mp.MenuId) > 0)
                                                    {
                                                    @:</ul>
                                                }
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <input type="submit" class="btn btn-primary" value="Submit" id="btnSubmit" />
                                        <input type="reset" class="btn btn-warning" value="Reset" id="btnClear" />
                                        <span id="errormsg" style="color:red;display:none">Please select any one menu to assign!</span>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <hr />
        </div>

        <div class="panel-footer">
            <p class="box-title"><b>Total Users till @String.Format("{0 : dddd, MMMM d, yyyy}", DateTime.Now)  : </b><span class="label label-primary">@ViewBag.Count</span></p>
        </div>
    </div>
}
@helper RenderMenuItem(List<AdminWebApp.Models.Menus> menuList, AdminWebApp.Models.Menus mi)
{
                    /**/

                    foreach (var cp in menuList.Where(p => p.ParentId == mi.MenuId))
                    {
                        @:<li>
                            <input type="checkbox" name="chkMenu" value="@cp.MenuId">@cp.MenuName
                            if (menuList.Count(p => p.ParentId == cp.MenuId) > 0)
                            {
                                @:<ul>
                                }
                                @RenderMenuItem(menuList, cp)
                                if (menuList.Count(p => p.ParentId == cp.MenuId) > 0)
                                {
                                @:</ul>
                            }
                            else
                            {
                            @:</li>
                        }
                    }
}


<script>
    $('input[type=checkbox]').click(function () {
        // children checkboxes depend on current checkbox
    if ($(this).next().find('input[type=checkbox]').length == 0 && $(this).hasClass('top_most')) {
        $(this).parent().next().find('input[type=checkbox]').prop('checked', this.checked);
    }
    else {
        $(this).next().find('input[type=checkbox]').prop('checked', this.checked);
    }
    if ($(this).parents('ul').prev('input[type=checkbox]').length == 0) {
        debugger
        $(this).parents('ul').prev().children('input[type=checkbox]').prop('checked', function () {
            return $(this).parent().next().find(':checked').length;
        });
    }
    else {
        // go up the hierarchy - and check/uncheck depending on number of children checked/unchecked
        $(this).parents('ul').prev('input[type=checkbox]').prop('checked', function () {
            return $(this).next().find(':checked').length;
        });
    }

    });
    $(function () {
        $("#btnSubmit").click(function () {
            var checked_checkboxes = $("input[type=checkbox]:checked");
            if (checked_checkboxes.length == 0) {
                $("#errormsg").show(); setTimeout(function () {
                    $("#errormsg").hide('fade', {}, 500)
                }, 5000);
                return false;
            }
            return true;
        });
    });
    //$(document).ready(function () {
    //    $("#btnSubmit").click(function () {
    //        var favorite = [];
    //        $.each($("input[type='checkbox']:checked"), function () {
    //            favorite.push($(this).val());
    //        });
    //        console.log(favorite.join(", "))
    //    });
    //});
    $("#RoleId").on("change", function () {
        var RoleId = $("#RoleId").val()
        if (RoleId != "") {
            $.ajax({
                type: "GET",
                url: "/Account/GetMenusforRole",
                data: { RoleId: RoleId },
                datatype: "JSON",
                success: function (data) {
                    $("input[type=checkbox]").prop("checked", false);
                    if (data != false) {
                        $("#Id").val(data[0].Id);
                        data = data[0].MenuIds;
                        var arrayValues = data.split(',');
                        $.each(arrayValues, function (i, val) {
                            $("input[value='" + val + "']").prop('checked', true);
                        });
                    }
                },
                error: function () {
                }
            })
        }
    });
</script>
